// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "example.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* M3ExampleStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ExampleStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3ExampleParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ExampleParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3ExampleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ExampleCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_example_2eproto() {
  protobuf_AddDesc_example_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "example.proto");
  GOOGLE_CHECK(file != NULL);
  M3ExampleStatus_descriptor_ = file->message_type(0);
  static const int M3ExampleStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleStatus, foo_),
  };
  M3ExampleStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ExampleStatus_descriptor_,
      M3ExampleStatus::default_instance_,
      M3ExampleStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ExampleStatus));
  M3ExampleParam_descriptor_ = file->message_type(1);
  static const int M3ExampleParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleParam, max_fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleParam, max_fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleParam, max_fz_),
  };
  M3ExampleParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ExampleParam_descriptor_,
      M3ExampleParam::default_instance_,
      M3ExampleParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ExampleParam));
  M3ExampleCommand_descriptor_ = file->message_type(2);
  static const int M3ExampleCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleCommand, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleCommand, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleCommand, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleCommand, fz_),
  };
  M3ExampleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ExampleCommand_descriptor_,
      M3ExampleCommand::default_instance_,
      M3ExampleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ExampleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ExampleCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_example_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ExampleStatus_descriptor_, &M3ExampleStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ExampleParam_descriptor_, &M3ExampleParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ExampleCommand_descriptor_, &M3ExampleCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_example_2eproto() {
  delete M3ExampleStatus::default_instance_;
  delete M3ExampleStatus_reflection_;
  delete M3ExampleParam::default_instance_;
  delete M3ExampleParam_reflection_;
  delete M3ExampleCommand::default_instance_;
  delete M3ExampleCommand_reflection_;
}

void protobuf_AddDesc_example_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rexample.proto\032\024component_base.proto\";\n"
    "\017M3ExampleStatus\022\033\n\004base\030\001 \001(\0132\r.M3BaseS"
    "tatus\022\013\n\003foo\030\002 \001(\001\"@\n\016M3ExampleParam\022\016\n\006"
    "max_fx\030\001 \001(\001\022\016\n\006max_fy\030\002 \001(\001\022\016\n\006max_fz\030\003"
    " \001(\001\"F\n\020M3ExampleCommand\022\016\n\006enable\030\001 \001(\010"
    "\022\n\n\002fx\030\002 \001(\001\022\n\n\002fy\030\003 \001(\001\022\n\n\002fz\030\004 \001(\001B\002H\001", 240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "example.proto", &protobuf_RegisterTypes);
  M3ExampleStatus::default_instance_ = new M3ExampleStatus();
  M3ExampleParam::default_instance_ = new M3ExampleParam();
  M3ExampleCommand::default_instance_ = new M3ExampleCommand();
  M3ExampleStatus::default_instance_->InitAsDefaultInstance();
  M3ExampleParam::default_instance_->InitAsDefaultInstance();
  M3ExampleCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_example_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_example_2eproto {
  StaticDescriptorInitializer_example_2eproto() {
    protobuf_AddDesc_example_2eproto();
  }
} static_descriptor_initializer_example_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3ExampleStatus::kBaseFieldNumber;
const int M3ExampleStatus::kFooFieldNumber;
#endif  // !_MSC_VER

M3ExampleStatus::M3ExampleStatus() {
  SharedCtor();
}

void M3ExampleStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3ExampleStatus::M3ExampleStatus(const M3ExampleStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3ExampleStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  foo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ExampleStatus::~M3ExampleStatus() {
  SharedDtor();
}

void M3ExampleStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

const ::google::protobuf::Descriptor* M3ExampleStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ExampleStatus_descriptor_;
}

const M3ExampleStatus& M3ExampleStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2eproto();  return *default_instance_;
}

M3ExampleStatus* M3ExampleStatus::default_instance_ = NULL;

M3ExampleStatus* M3ExampleStatus::New() const {
  return new M3ExampleStatus;
}

void M3ExampleStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    foo_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ExampleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_base()));
        if (input->ExpectTag(17)) goto parse_foo;
        break;
      }
      
      // optional double foo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_foo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &foo_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ExampleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3ExampleStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->base(), output);
  }
  
  // optional double foo = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->foo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ExampleStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional double foo = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->foo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ExampleStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional double foo = 2;
    if (has_foo()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3ExampleStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ExampleStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ExampleStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ExampleStatus::MergeFrom(const M3ExampleStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      set_foo(from.foo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ExampleStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ExampleStatus::CopyFrom(const M3ExampleStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ExampleStatus::IsInitialized() const {
  
  return true;
}

void M3ExampleStatus::Swap(M3ExampleStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(foo_, other->foo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ExampleStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ExampleStatus_descriptor_;
  metadata.reflection = M3ExampleStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3ExampleParam::kMaxFxFieldNumber;
const int M3ExampleParam::kMaxFyFieldNumber;
const int M3ExampleParam::kMaxFzFieldNumber;
#endif  // !_MSC_VER

M3ExampleParam::M3ExampleParam() {
  SharedCtor();
}

void M3ExampleParam::InitAsDefaultInstance() {
}

M3ExampleParam::M3ExampleParam(const M3ExampleParam& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3ExampleParam::SharedCtor() {
  _cached_size_ = 0;
  max_fx_ = 0;
  max_fy_ = 0;
  max_fz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ExampleParam::~M3ExampleParam() {
  SharedDtor();
}

void M3ExampleParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3ExampleParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ExampleParam_descriptor_;
}

const M3ExampleParam& M3ExampleParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2eproto();  return *default_instance_;
}

M3ExampleParam* M3ExampleParam::default_instance_ = NULL;

M3ExampleParam* M3ExampleParam::New() const {
  return new M3ExampleParam;
}

void M3ExampleParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_fx_ = 0;
    max_fy_ = 0;
    max_fz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ExampleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_fx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &max_fx_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_max_fy;
        break;
      }
      
      // optional double max_fy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_max_fy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &max_fy_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_max_fz;
        break;
      }
      
      // optional double max_fz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_max_fz:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &max_fz_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ExampleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3ExampleParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional double max_fx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_fx(), output);
  }
  
  // optional double max_fy = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_fy(), output);
  }
  
  // optional double max_fz = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_fz(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ExampleParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double max_fx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_fx(), target);
  }
  
  // optional double max_fy = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_fy(), target);
  }
  
  // optional double max_fz = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_fz(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ExampleParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double max_fx = 1;
    if (has_max_fx()) {
      total_size += 1 + 8;
    }
    
    // optional double max_fy = 2;
    if (has_max_fy()) {
      total_size += 1 + 8;
    }
    
    // optional double max_fz = 3;
    if (has_max_fz()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3ExampleParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ExampleParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ExampleParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ExampleParam::MergeFrom(const M3ExampleParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_max_fx(from.max_fx());
    }
    if (from._has_bit(1)) {
      set_max_fy(from.max_fy());
    }
    if (from._has_bit(2)) {
      set_max_fz(from.max_fz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ExampleParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ExampleParam::CopyFrom(const M3ExampleParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ExampleParam::IsInitialized() const {
  
  return true;
}

void M3ExampleParam::Swap(M3ExampleParam* other) {
  if (other != this) {
    std::swap(max_fx_, other->max_fx_);
    std::swap(max_fy_, other->max_fy_);
    std::swap(max_fz_, other->max_fz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ExampleParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ExampleParam_descriptor_;
  metadata.reflection = M3ExampleParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3ExampleCommand::kEnableFieldNumber;
const int M3ExampleCommand::kFxFieldNumber;
const int M3ExampleCommand::kFyFieldNumber;
const int M3ExampleCommand::kFzFieldNumber;
#endif  // !_MSC_VER

M3ExampleCommand::M3ExampleCommand() {
  SharedCtor();
}

void M3ExampleCommand::InitAsDefaultInstance() {
}

M3ExampleCommand::M3ExampleCommand(const M3ExampleCommand& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3ExampleCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  fx_ = 0;
  fy_ = 0;
  fz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ExampleCommand::~M3ExampleCommand() {
  SharedDtor();
}

void M3ExampleCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3ExampleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ExampleCommand_descriptor_;
}

const M3ExampleCommand& M3ExampleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2eproto();  return *default_instance_;
}

M3ExampleCommand* M3ExampleCommand::default_instance_ = NULL;

M3ExampleCommand* M3ExampleCommand::New() const {
  return new M3ExampleCommand;
}

void M3ExampleCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
    fx_ = 0;
    fy_ = 0;
    fz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ExampleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &enable_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_fx;
        break;
      }
      
      // optional double fx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_fx:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &fx_));
        _set_bit(1);
        if (input->ExpectTag(25)) goto parse_fy;
        break;
      }
      
      // optional double fy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_fy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &fy_));
        _set_bit(2);
        if (input->ExpectTag(33)) goto parse_fz;
        break;
      }
      
      // optional double fz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_fz:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &fz_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ExampleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3ExampleCommand::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bool enable = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }
  
  // optional double fx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fx(), output);
  }
  
  // optional double fy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fy(), output);
  }
  
  // optional double fz = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fz(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ExampleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enable = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }
  
  // optional double fx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fx(), target);
  }
  
  // optional double fy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fy(), target);
  }
  
  // optional double fz = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fz(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ExampleCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }
    
    // optional double fx = 2;
    if (has_fx()) {
      total_size += 1 + 8;
    }
    
    // optional double fy = 3;
    if (has_fy()) {
      total_size += 1 + 8;
    }
    
    // optional double fz = 4;
    if (has_fz()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3ExampleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ExampleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ExampleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ExampleCommand::MergeFrom(const M3ExampleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_enable(from.enable());
    }
    if (from._has_bit(1)) {
      set_fx(from.fx());
    }
    if (from._has_bit(2)) {
      set_fy(from.fy());
    }
    if (from._has_bit(3)) {
      set_fz(from.fz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ExampleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ExampleCommand::CopyFrom(const M3ExampleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ExampleCommand::IsInitialized() const {
  
  return true;
}

void M3ExampleCommand::Swap(M3ExampleCommand* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(fx_, other->fx_);
    std::swap(fy_, other->fy_);
    std::swap(fz_, other->fz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ExampleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ExampleCommand_descriptor_;
  metadata.reflection = M3ExampleCommand_reflection_;
  return metadata;
}

