// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_example_2eproto__INCLUDED
#define PROTOBUF_example_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "component_base.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_example_2eproto();
void protobuf_AssignDesc_example_2eproto();
void protobuf_ShutdownFile_example_2eproto();

class M3ExampleStatus;
class M3ExampleParam;
class M3ExampleCommand;

// ===================================================================

class M3ExampleStatus : public ::google::protobuf::Message {
 public:
  M3ExampleStatus();
  virtual ~M3ExampleStatus();
  
  M3ExampleStatus(const M3ExampleStatus& from);
  
  inline M3ExampleStatus& operator=(const M3ExampleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3ExampleStatus& default_instance();
  void Swap(M3ExampleStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3ExampleStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3ExampleStatus& from);
  void MergeFrom(const M3ExampleStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  
  // optional double foo = 2;
  inline bool has_foo() const;
  inline void clear_foo();
  static const int kFooFieldNumber = 2;
  inline double foo() const;
  inline void set_foo(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::M3BaseStatus* base_;
  double foo_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3ExampleStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3ExampleParam : public ::google::protobuf::Message {
 public:
  M3ExampleParam();
  virtual ~M3ExampleParam();
  
  M3ExampleParam(const M3ExampleParam& from);
  
  inline M3ExampleParam& operator=(const M3ExampleParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3ExampleParam& default_instance();
  void Swap(M3ExampleParam* other);
  
  // implements Message ----------------------------------------------
  
  M3ExampleParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3ExampleParam& from);
  void MergeFrom(const M3ExampleParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double max_fx = 1;
  inline bool has_max_fx() const;
  inline void clear_max_fx();
  static const int kMaxFxFieldNumber = 1;
  inline double max_fx() const;
  inline void set_max_fx(double value);
  
  // optional double max_fy = 2;
  inline bool has_max_fy() const;
  inline void clear_max_fy();
  static const int kMaxFyFieldNumber = 2;
  inline double max_fy() const;
  inline void set_max_fy(double value);
  
  // optional double max_fz = 3;
  inline bool has_max_fz() const;
  inline void clear_max_fz();
  static const int kMaxFzFieldNumber = 3;
  inline double max_fz() const;
  inline void set_max_fz(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double max_fx_;
  double max_fy_;
  double max_fz_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3ExampleParam* default_instance_;
};
// -------------------------------------------------------------------

class M3ExampleCommand : public ::google::protobuf::Message {
 public:
  M3ExampleCommand();
  virtual ~M3ExampleCommand();
  
  M3ExampleCommand(const M3ExampleCommand& from);
  
  inline M3ExampleCommand& operator=(const M3ExampleCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3ExampleCommand& default_instance();
  void Swap(M3ExampleCommand* other);
  
  // implements Message ----------------------------------------------
  
  M3ExampleCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3ExampleCommand& from);
  void MergeFrom(const M3ExampleCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline bool enable() const;
  inline void set_enable(bool value);
  
  // optional double fx = 2;
  inline bool has_fx() const;
  inline void clear_fx();
  static const int kFxFieldNumber = 2;
  inline double fx() const;
  inline void set_fx(double value);
  
  // optional double fy = 3;
  inline bool has_fy() const;
  inline void clear_fy();
  static const int kFyFieldNumber = 3;
  inline double fy() const;
  inline void set_fy(double value);
  
  // optional double fz = 4;
  inline bool has_fz() const;
  inline void clear_fz();
  static const int kFzFieldNumber = 4;
  inline double fz() const;
  inline void set_fz(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool enable_;
  double fx_;
  double fy_;
  double fz_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3ExampleCommand* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// M3ExampleStatus

// optional .M3BaseStatus base = 1;
inline bool M3ExampleStatus::has_base() const {
  return _has_bit(0);
}
inline void M3ExampleStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  _clear_bit(0);
}
inline const ::M3BaseStatus& M3ExampleStatus::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3ExampleStatus::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  return base_;
}

// optional double foo = 2;
inline bool M3ExampleStatus::has_foo() const {
  return _has_bit(1);
}
inline void M3ExampleStatus::clear_foo() {
  foo_ = 0;
  _clear_bit(1);
}
inline double M3ExampleStatus::foo() const {
  return foo_;
}
inline void M3ExampleStatus::set_foo(double value) {
  _set_bit(1);
  foo_ = value;
}

// -------------------------------------------------------------------

// M3ExampleParam

// optional double max_fx = 1;
inline bool M3ExampleParam::has_max_fx() const {
  return _has_bit(0);
}
inline void M3ExampleParam::clear_max_fx() {
  max_fx_ = 0;
  _clear_bit(0);
}
inline double M3ExampleParam::max_fx() const {
  return max_fx_;
}
inline void M3ExampleParam::set_max_fx(double value) {
  _set_bit(0);
  max_fx_ = value;
}

// optional double max_fy = 2;
inline bool M3ExampleParam::has_max_fy() const {
  return _has_bit(1);
}
inline void M3ExampleParam::clear_max_fy() {
  max_fy_ = 0;
  _clear_bit(1);
}
inline double M3ExampleParam::max_fy() const {
  return max_fy_;
}
inline void M3ExampleParam::set_max_fy(double value) {
  _set_bit(1);
  max_fy_ = value;
}

// optional double max_fz = 3;
inline bool M3ExampleParam::has_max_fz() const {
  return _has_bit(2);
}
inline void M3ExampleParam::clear_max_fz() {
  max_fz_ = 0;
  _clear_bit(2);
}
inline double M3ExampleParam::max_fz() const {
  return max_fz_;
}
inline void M3ExampleParam::set_max_fz(double value) {
  _set_bit(2);
  max_fz_ = value;
}

// -------------------------------------------------------------------

// M3ExampleCommand

// optional bool enable = 1;
inline bool M3ExampleCommand::has_enable() const {
  return _has_bit(0);
}
inline void M3ExampleCommand::clear_enable() {
  enable_ = false;
  _clear_bit(0);
}
inline bool M3ExampleCommand::enable() const {
  return enable_;
}
inline void M3ExampleCommand::set_enable(bool value) {
  _set_bit(0);
  enable_ = value;
}

// optional double fx = 2;
inline bool M3ExampleCommand::has_fx() const {
  return _has_bit(1);
}
inline void M3ExampleCommand::clear_fx() {
  fx_ = 0;
  _clear_bit(1);
}
inline double M3ExampleCommand::fx() const {
  return fx_;
}
inline void M3ExampleCommand::set_fx(double value) {
  _set_bit(1);
  fx_ = value;
}

// optional double fy = 3;
inline bool M3ExampleCommand::has_fy() const {
  return _has_bit(2);
}
inline void M3ExampleCommand::clear_fy() {
  fy_ = 0;
  _clear_bit(2);
}
inline double M3ExampleCommand::fy() const {
  return fy_;
}
inline void M3ExampleCommand::set_fy(double value) {
  _set_bit(2);
  fy_ = value;
}

// optional double fz = 4;
inline bool M3ExampleCommand::has_fz() const {
  return _has_bit(3);
}
inline void M3ExampleCommand::clear_fz() {
  fz_ = 0;
  _clear_bit(3);
}
inline double M3ExampleCommand::fz() const {
  return fz_;
}
inline void M3ExampleCommand::set_fz(double value) {
  _set_bit(3);
  fz_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_example_2eproto__INCLUDED
