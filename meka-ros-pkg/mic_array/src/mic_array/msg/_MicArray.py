"""autogenerated by genpy from mic_array/MicArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MicArray(genpy.Message):
  _md5sum = "222e1628bdbc23e02ad70bc1470fcd56"
  _type = "mic_array/MicArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[6] mic_energy
float32 angle
float32 mag
"""
  __slots__ = ['mic_energy','angle','mag']
  _slot_types = ['float32[6]','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mic_energy,angle,mag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MicArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mic_energy is None:
        self.mic_energy = [0.,0.,0.,0.,0.,0.]
      if self.angle is None:
        self.angle = 0.
      if self.mag is None:
        self.mag = 0.
    else:
      self.mic_energy = [0.,0.,0.,0.,0.,0.]
      self.angle = 0.
      self.mag = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_6f.pack(*self.mic_energy))
      _x = self
      buff.write(_struct_2f.pack(_x.angle, _x.mag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 24
      self.mic_energy = _struct_6f.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.angle, _x.mag,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.mic_energy.tostring())
      _x = self
      buff.write(_struct_2f.pack(_x.angle, _x.mag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 24
      self.mic_energy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      _x = self
      start = end
      end += 8
      (_x.angle, _x.mag,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
_struct_6f = struct.Struct("<6f")
