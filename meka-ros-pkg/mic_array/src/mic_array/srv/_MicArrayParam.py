"""autogenerated by genpy from mic_array/MicArrayParamRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MicArrayParamRequest(genpy.Message):
  _md5sum = "dde756c8e5c4e720127a4ebc2998fe0b"
  _type = "mic_array/MicArrayParamRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[6] gains
float32[6] bias
float32 window_time
float32 threshold
float32 slew_rate

"""
  __slots__ = ['gains','bias','window_time','threshold','slew_rate']
  _slot_types = ['float32[6]','float32[6]','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gains,bias,window_time,threshold,slew_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MicArrayParamRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gains is None:
        self.gains = [0.,0.,0.,0.,0.,0.]
      if self.bias is None:
        self.bias = [0.,0.,0.,0.,0.,0.]
      if self.window_time is None:
        self.window_time = 0.
      if self.threshold is None:
        self.threshold = 0.
      if self.slew_rate is None:
        self.slew_rate = 0.
    else:
      self.gains = [0.,0.,0.,0.,0.,0.]
      self.bias = [0.,0.,0.,0.,0.,0.]
      self.window_time = 0.
      self.threshold = 0.
      self.slew_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_6f.pack(*self.gains))
      buff.write(_struct_6f.pack(*self.bias))
      _x = self
      buff.write(_struct_3f.pack(_x.window_time, _x.threshold, _x.slew_rate))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 24
      self.gains = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.bias = _struct_6f.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.window_time, _x.threshold, _x.slew_rate,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.gains.tostring())
      buff.write(self.bias.tostring())
      _x = self
      buff.write(_struct_3f.pack(_x.window_time, _x.threshold, _x.slew_rate))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 24
      self.gains = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.bias = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      _x = self
      start = end
      end += 12
      (_x.window_time, _x.threshold, _x.slew_rate,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
_struct_6f = struct.Struct("<6f")
"""autogenerated by genpy from mic_array/MicArrayParamResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MicArrayParamResponse(genpy.Message):
  _md5sum = "42304bdf2c094cc81d22e59a661c7967"
  _type = "mic_array/MicArrayParamResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 resp


"""
  __slots__ = ['resp']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       resp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MicArrayParamResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.resp is None:
        self.resp = 0
    else:
      self.resp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.resp))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.resp,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.resp))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.resp,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class MicArrayParam(object):
  _type          = 'mic_array/MicArrayParam'
  _md5sum = '5ac40a290a3cfd8edd9349aa1ca0043f'
  _request_class  = MicArrayParamRequest
  _response_class = MicArrayParamResponse
