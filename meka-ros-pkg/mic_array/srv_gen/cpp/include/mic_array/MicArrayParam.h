/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/meka-ros-pkg/mic_array/srv/MicArrayParam.srv */
#ifndef MIC_ARRAY_SERVICE_MICARRAYPARAM_H
#define MIC_ARRAY_SERVICE_MICARRAYPARAM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mic_array
{
template <class ContainerAllocator>
struct MicArrayParamRequest_ {
  typedef MicArrayParamRequest_<ContainerAllocator> Type;

  MicArrayParamRequest_()
  : gains()
  , bias()
  , window_time(0.0)
  , threshold(0.0)
  , slew_rate(0.0)
  {
    gains.assign(0.0);
    bias.assign(0.0);
  }

  MicArrayParamRequest_(const ContainerAllocator& _alloc)
  : gains()
  , bias()
  , window_time(0.0)
  , threshold(0.0)
  , slew_rate(0.0)
  {
    gains.assign(0.0);
    bias.assign(0.0);
  }

  typedef boost::array<float, 6>  _gains_type;
  boost::array<float, 6>  gains;

  typedef boost::array<float, 6>  _bias_type;
  boost::array<float, 6>  bias;

  typedef float _window_time_type;
  float window_time;

  typedef float _threshold_type;
  float threshold;

  typedef float _slew_rate_type;
  float slew_rate;


  typedef boost::shared_ptr< ::mic_array::MicArrayParamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mic_array::MicArrayParamRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MicArrayParamRequest
typedef  ::mic_array::MicArrayParamRequest_<std::allocator<void> > MicArrayParamRequest;

typedef boost::shared_ptr< ::mic_array::MicArrayParamRequest> MicArrayParamRequestPtr;
typedef boost::shared_ptr< ::mic_array::MicArrayParamRequest const> MicArrayParamRequestConstPtr;


template <class ContainerAllocator>
struct MicArrayParamResponse_ {
  typedef MicArrayParamResponse_<ContainerAllocator> Type;

  MicArrayParamResponse_()
  : resp(0)
  {
  }

  MicArrayParamResponse_(const ContainerAllocator& _alloc)
  : resp(0)
  {
  }

  typedef int32_t _resp_type;
  int32_t resp;


  typedef boost::shared_ptr< ::mic_array::MicArrayParamResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mic_array::MicArrayParamResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MicArrayParamResponse
typedef  ::mic_array::MicArrayParamResponse_<std::allocator<void> > MicArrayParamResponse;

typedef boost::shared_ptr< ::mic_array::MicArrayParamResponse> MicArrayParamResponsePtr;
typedef boost::shared_ptr< ::mic_array::MicArrayParamResponse const> MicArrayParamResponseConstPtr;

struct MicArrayParam
{

typedef MicArrayParamRequest Request;
typedef MicArrayParamResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MicArrayParam
} // namespace mic_array

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mic_array::MicArrayParamRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mic_array::MicArrayParamRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mic_array::MicArrayParamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dde756c8e5c4e720127a4ebc2998fe0b";
  }

  static const char* value(const  ::mic_array::MicArrayParamRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdde756c8e5c4e720ULL;
  static const uint64_t static_value2 = 0x127a4ebc2998fe0bULL;
};

template<class ContainerAllocator>
struct DataType< ::mic_array::MicArrayParamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mic_array/MicArrayParamRequest";
  }

  static const char* value(const  ::mic_array::MicArrayParamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mic_array::MicArrayParamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[6] gains\n\
float32[6] bias\n\
float32 window_time\n\
float32 threshold\n\
float32 slew_rate\n\
\n\
";
  }

  static const char* value(const  ::mic_array::MicArrayParamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mic_array::MicArrayParamRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mic_array::MicArrayParamResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mic_array::MicArrayParamResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mic_array::MicArrayParamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "42304bdf2c094cc81d22e59a661c7967";
  }

  static const char* value(const  ::mic_array::MicArrayParamResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x42304bdf2c094cc8ULL;
  static const uint64_t static_value2 = 0x1d22e59a661c7967ULL;
};

template<class ContainerAllocator>
struct DataType< ::mic_array::MicArrayParamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mic_array/MicArrayParamResponse";
  }

  static const char* value(const  ::mic_array::MicArrayParamResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mic_array::MicArrayParamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 resp\n\
\n\
\n\
";
  }

  static const char* value(const  ::mic_array::MicArrayParamResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mic_array::MicArrayParamResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mic_array::MicArrayParamRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.gains);
    stream.next(m.bias);
    stream.next(m.window_time);
    stream.next(m.threshold);
    stream.next(m.slew_rate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MicArrayParamRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mic_array::MicArrayParamResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.resp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MicArrayParamResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mic_array::MicArrayParam> {
  static const char* value() 
  {
    return "5ac40a290a3cfd8edd9349aa1ca0043f";
  }

  static const char* value(const mic_array::MicArrayParam&) { return value(); } 
};

template<>
struct DataType<mic_array::MicArrayParam> {
  static const char* value() 
  {
    return "mic_array/MicArrayParam";
  }

  static const char* value(const mic_array::MicArrayParam&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mic_array::MicArrayParamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ac40a290a3cfd8edd9349aa1ca0043f";
  }

  static const char* value(const mic_array::MicArrayParamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mic_array::MicArrayParamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mic_array/MicArrayParam";
  }

  static const char* value(const mic_array::MicArrayParamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mic_array::MicArrayParamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5ac40a290a3cfd8edd9349aa1ca0043f";
  }

  static const char* value(const mic_array::MicArrayParamResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mic_array::MicArrayParamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mic_array/MicArrayParam";
  }

  static const char* value(const mic_array::MicArrayParamResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MIC_ARRAY_SERVICE_MICARRAYPARAM_H

