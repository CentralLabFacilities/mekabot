/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/meka-ros-pkg/mic_array/msg/MicArray.msg */
#ifndef MIC_ARRAY_MESSAGE_MICARRAY_H
#define MIC_ARRAY_MESSAGE_MICARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace mic_array
{
template <class ContainerAllocator>
struct MicArray_ {
  typedef MicArray_<ContainerAllocator> Type;

  MicArray_()
  : mic_energy()
  , angle(0.0)
  , mag(0.0)
  {
    mic_energy.assign(0.0);
  }

  MicArray_(const ContainerAllocator& _alloc)
  : mic_energy()
  , angle(0.0)
  , mag(0.0)
  {
    mic_energy.assign(0.0);
  }

  typedef boost::array<float, 6>  _mic_energy_type;
  boost::array<float, 6>  mic_energy;

  typedef float _angle_type;
  float angle;

  typedef float _mag_type;
  float mag;


  typedef boost::shared_ptr< ::mic_array::MicArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mic_array::MicArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MicArray
typedef  ::mic_array::MicArray_<std::allocator<void> > MicArray;

typedef boost::shared_ptr< ::mic_array::MicArray> MicArrayPtr;
typedef boost::shared_ptr< ::mic_array::MicArray const> MicArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mic_array::MicArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mic_array::MicArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mic_array

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mic_array::MicArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mic_array::MicArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mic_array::MicArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "222e1628bdbc23e02ad70bc1470fcd56";
  }

  static const char* value(const  ::mic_array::MicArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x222e1628bdbc23e0ULL;
  static const uint64_t static_value2 = 0x2ad70bc1470fcd56ULL;
};

template<class ContainerAllocator>
struct DataType< ::mic_array::MicArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mic_array/MicArray";
  }

  static const char* value(const  ::mic_array::MicArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mic_array::MicArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[6] mic_energy\n\
float32 angle\n\
float32 mag\n\
";
  }

  static const char* value(const  ::mic_array::MicArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mic_array::MicArray_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mic_array::MicArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mic_energy);
    stream.next(m.angle);
    stream.next(m.mag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MicArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mic_array::MicArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mic_array::MicArray_<ContainerAllocator> & v) 
  {
    s << indent << "mic_energy[]" << std::endl;
    for (size_t i = 0; i < v.mic_energy.size(); ++i)
    {
      s << indent << "  mic_energy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mic_energy[i]);
    }
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "mag: ";
    Printer<float>::stream(s, indent + "  ", v.mag);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MIC_ARRAY_MESSAGE_MICARRAY_H

