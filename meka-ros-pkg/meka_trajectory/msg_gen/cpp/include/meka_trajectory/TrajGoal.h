/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/meka-ros-pkg/meka_trajectory/msg/TrajGoal.msg */
#ifndef MEKA_TRAJECTORY_MESSAGE_TRAJGOAL_H
#define MEKA_TRAJECTORY_MESSAGE_TRAJGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "trajectory_msgs/JointTrajectory.h"

namespace meka_trajectory
{
template <class ContainerAllocator>
struct TrajGoal_ {
  typedef TrajGoal_<ContainerAllocator> Type;

  TrajGoal_()
  : trajectory()
  {
  }

  TrajGoal_(const ContainerAllocator& _alloc)
  : trajectory(_alloc)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
   ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  trajectory;


  typedef boost::shared_ptr< ::meka_trajectory::TrajGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::meka_trajectory::TrajGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrajGoal
typedef  ::meka_trajectory::TrajGoal_<std::allocator<void> > TrajGoal;

typedef boost::shared_ptr< ::meka_trajectory::TrajGoal> TrajGoalPtr;
typedef boost::shared_ptr< ::meka_trajectory::TrajGoal const> TrajGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::meka_trajectory::TrajGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::meka_trajectory::TrajGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace meka_trajectory

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::meka_trajectory::TrajGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::meka_trajectory::TrajGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::meka_trajectory::TrajGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "48a668811b715b51af6b3383511ae27f";
  }

  static const char* value(const  ::meka_trajectory::TrajGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x48a668811b715b51ULL;
  static const uint64_t static_value2 = 0xaf6b3383511ae27fULL;
};

template<class ContainerAllocator>
struct DataType< ::meka_trajectory::TrajGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "meka_trajectory/TrajGoal";
  }

  static const char* value(const  ::meka_trajectory::TrajGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::meka_trajectory::TrajGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
trajectory_msgs/JointTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
";
  }

  static const char* value(const  ::meka_trajectory::TrajGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::meka_trajectory::TrajGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trajectory);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::meka_trajectory::TrajGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::meka_trajectory::TrajGoal_<ContainerAllocator> & v) 
  {
    s << indent << "trajectory: ";
s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MEKA_TRAJECTORY_MESSAGE_TRAJGOAL_H

