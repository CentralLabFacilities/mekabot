/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/m3meka/ros/m3meka_msgs/srv/M3JointArrayStatus.srv */
#ifndef M3MEKA_MSGS_SERVICE_M3JOINTARRAYSTATUS_H
#define M3MEKA_MSGS_SERVICE_M3JOINTARRAYSTATUS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "m3_msgs/M3BaseStatus.h"

namespace m3meka_msgs
{
template <class ContainerAllocator>
struct M3JointArrayStatusRequest_ : public ros::Message
{
  typedef M3JointArrayStatusRequest_<ContainerAllocator> Type;

  M3JointArrayStatusRequest_()
  : request(0)
  {
  }

  M3JointArrayStatusRequest_(const ContainerAllocator& _alloc)
  : request(0)
  {
  }

  typedef int32_t _request_type;
  int32_t request;


private:
  static const char* __s_getDataType_() { return "m3meka_msgs/M3JointArrayStatusRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "650f0ccd41c8f8d53ada80be6ddde434"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fd0ff7bf51cf3c5324e0ee2aef6015d7"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 request\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, request);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, request);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(request);
    return size;
  }

  typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct M3JointArrayStatusRequest
typedef  ::m3meka_msgs::M3JointArrayStatusRequest_<std::allocator<void> > M3JointArrayStatusRequest;

typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusRequest> M3JointArrayStatusRequestPtr;
typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusRequest const> M3JointArrayStatusRequestConstPtr;


template <class ContainerAllocator>
struct M3JointArrayStatusResponse_ : public ros::Message
{
  typedef M3JointArrayStatusResponse_<ContainerAllocator> Type;

  M3JointArrayStatusResponse_()
  : base()
  , motor_temp()
  , amp_temp()
  , current()
  , torque()
  , torquedot()
  , theta()
  , thetadot()
  , thetadotdot()
  , completed_spline_idx(0)
  , pwm_cmd()
  {
  }

  M3JointArrayStatusResponse_(const ContainerAllocator& _alloc)
  : base(_alloc)
  , motor_temp(_alloc)
  , amp_temp(_alloc)
  , current(_alloc)
  , torque(_alloc)
  , torquedot(_alloc)
  , theta(_alloc)
  , thetadot(_alloc)
  , thetadotdot(_alloc)
  , completed_spline_idx(0)
  , pwm_cmd(_alloc)
  {
  }

  typedef  ::m3_msgs::M3BaseStatus_<ContainerAllocator>  _base_type;
   ::m3_msgs::M3BaseStatus_<ContainerAllocator>  base;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _motor_temp_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  motor_temp;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _amp_temp_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  amp_temp;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _current_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  current;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _torque_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  torque;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _torquedot_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  torquedot;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _theta_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  theta;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _thetadot_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  thetadot;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _thetadotdot_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  thetadotdot;

  typedef int32_t _completed_spline_idx_type;
  int32_t completed_spline_idx;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _pwm_cmd_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  pwm_cmd;


  ROSCPP_DEPRECATED uint32_t get_motor_temp_size() const { return (uint32_t)motor_temp.size(); }
  ROSCPP_DEPRECATED void set_motor_temp_size(uint32_t size) { motor_temp.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_motor_temp_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->motor_temp; }
  ROSCPP_DEPRECATED void set_motor_temp_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->motor_temp = vec; }
  ROSCPP_DEPRECATED uint32_t get_amp_temp_size() const { return (uint32_t)amp_temp.size(); }
  ROSCPP_DEPRECATED void set_amp_temp_size(uint32_t size) { amp_temp.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_amp_temp_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->amp_temp; }
  ROSCPP_DEPRECATED void set_amp_temp_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->amp_temp = vec; }
  ROSCPP_DEPRECATED uint32_t get_current_size() const { return (uint32_t)current.size(); }
  ROSCPP_DEPRECATED void set_current_size(uint32_t size) { current.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_current_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->current; }
  ROSCPP_DEPRECATED void set_current_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->current = vec; }
  ROSCPP_DEPRECATED uint32_t get_torque_size() const { return (uint32_t)torque.size(); }
  ROSCPP_DEPRECATED void set_torque_size(uint32_t size) { torque.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_torque_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->torque; }
  ROSCPP_DEPRECATED void set_torque_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->torque = vec; }
  ROSCPP_DEPRECATED uint32_t get_torquedot_size() const { return (uint32_t)torquedot.size(); }
  ROSCPP_DEPRECATED void set_torquedot_size(uint32_t size) { torquedot.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_torquedot_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->torquedot; }
  ROSCPP_DEPRECATED void set_torquedot_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->torquedot = vec; }
  ROSCPP_DEPRECATED uint32_t get_theta_size() const { return (uint32_t)theta.size(); }
  ROSCPP_DEPRECATED void set_theta_size(uint32_t size) { theta.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_theta_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->theta; }
  ROSCPP_DEPRECATED void set_theta_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->theta = vec; }
  ROSCPP_DEPRECATED uint32_t get_thetadot_size() const { return (uint32_t)thetadot.size(); }
  ROSCPP_DEPRECATED void set_thetadot_size(uint32_t size) { thetadot.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_thetadot_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->thetadot; }
  ROSCPP_DEPRECATED void set_thetadot_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->thetadot = vec; }
  ROSCPP_DEPRECATED uint32_t get_thetadotdot_size() const { return (uint32_t)thetadotdot.size(); }
  ROSCPP_DEPRECATED void set_thetadotdot_size(uint32_t size) { thetadotdot.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_thetadotdot_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->thetadotdot; }
  ROSCPP_DEPRECATED void set_thetadotdot_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->thetadotdot = vec; }
  ROSCPP_DEPRECATED uint32_t get_pwm_cmd_size() const { return (uint32_t)pwm_cmd.size(); }
  ROSCPP_DEPRECATED void set_pwm_cmd_size(uint32_t size) { pwm_cmd.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_pwm_cmd_vec(std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) const { vec = this->pwm_cmd; }
  ROSCPP_DEPRECATED void set_pwm_cmd_vec(const std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other > & vec) { this->pwm_cmd = vec; }
private:
  static const char* __s_getDataType_() { return "m3meka_msgs/M3JointArrayStatusResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b3c51b6c0fba9e6bcb03e3e871454442"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "fd0ff7bf51cf3c5324e0ee2aef6015d7"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "m3_msgs/M3BaseStatus base\n\
float32[] motor_temp\n\
float32[] amp_temp\n\
float32[] current\n\
float32[] torque\n\
float32[] torquedot\n\
float32[] theta\n\
float32[] thetadot\n\
float32[] thetadotdot\n\
int32 completed_spline_idx\n\
int32[] pwm_cmd\n\
\n\
================================================================================\n\
MSG: m3_msgs/M3BaseStatus\n\
string name\n\
uint8 state\n\
int64 timestamp\n\
string rate\n\
string version\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, base);
    ros::serialization::serialize(stream, motor_temp);
    ros::serialization::serialize(stream, amp_temp);
    ros::serialization::serialize(stream, current);
    ros::serialization::serialize(stream, torque);
    ros::serialization::serialize(stream, torquedot);
    ros::serialization::serialize(stream, theta);
    ros::serialization::serialize(stream, thetadot);
    ros::serialization::serialize(stream, thetadotdot);
    ros::serialization::serialize(stream, completed_spline_idx);
    ros::serialization::serialize(stream, pwm_cmd);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, base);
    ros::serialization::deserialize(stream, motor_temp);
    ros::serialization::deserialize(stream, amp_temp);
    ros::serialization::deserialize(stream, current);
    ros::serialization::deserialize(stream, torque);
    ros::serialization::deserialize(stream, torquedot);
    ros::serialization::deserialize(stream, theta);
    ros::serialization::deserialize(stream, thetadot);
    ros::serialization::deserialize(stream, thetadotdot);
    ros::serialization::deserialize(stream, completed_spline_idx);
    ros::serialization::deserialize(stream, pwm_cmd);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(base);
    size += ros::serialization::serializationLength(motor_temp);
    size += ros::serialization::serializationLength(amp_temp);
    size += ros::serialization::serializationLength(current);
    size += ros::serialization::serializationLength(torque);
    size += ros::serialization::serializationLength(torquedot);
    size += ros::serialization::serializationLength(theta);
    size += ros::serialization::serializationLength(thetadot);
    size += ros::serialization::serializationLength(thetadotdot);
    size += ros::serialization::serializationLength(completed_spline_idx);
    size += ros::serialization::serializationLength(pwm_cmd);
    return size;
  }

  typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct M3JointArrayStatusResponse
typedef  ::m3meka_msgs::M3JointArrayStatusResponse_<std::allocator<void> > M3JointArrayStatusResponse;

typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusResponse> M3JointArrayStatusResponsePtr;
typedef boost::shared_ptr< ::m3meka_msgs::M3JointArrayStatusResponse const> M3JointArrayStatusResponseConstPtr;

struct M3JointArrayStatus
{

typedef M3JointArrayStatusRequest Request;
typedef M3JointArrayStatusResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct M3JointArrayStatus
} // namespace m3meka_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "650f0ccd41c8f8d53ada80be6ddde434";
  }

  static const char* value(const  ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x650f0ccd41c8f8d5ULL;
  static const uint64_t static_value2 = 0x3ada80be6ddde434ULL;
};

template<class ContainerAllocator>
struct DataType< ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3JointArrayStatusRequest";
  }

  static const char* value(const  ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 request\n\
\n\
";
  }

  static const char* value(const  ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b3c51b6c0fba9e6bcb03e3e871454442";
  }

  static const char* value(const  ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb3c51b6c0fba9e6bULL;
  static const uint64_t static_value2 = 0xcb03e3e871454442ULL;
};

template<class ContainerAllocator>
struct DataType< ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3JointArrayStatusResponse";
  }

  static const char* value(const  ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3_msgs/M3BaseStatus base\n\
float32[] motor_temp\n\
float32[] amp_temp\n\
float32[] current\n\
float32[] torque\n\
float32[] torquedot\n\
float32[] theta\n\
float32[] thetadot\n\
float32[] thetadotdot\n\
int32 completed_spline_idx\n\
int32[] pwm_cmd\n\
\n\
================================================================================\n\
MSG: m3_msgs/M3BaseStatus\n\
string name\n\
uint8 state\n\
int64 timestamp\n\
string rate\n\
string version\n\
\n\
\n\
";
  }

  static const char* value(const  ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3JointArrayStatusRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.base);
    stream.next(m.motor_temp);
    stream.next(m.amp_temp);
    stream.next(m.current);
    stream.next(m.torque);
    stream.next(m.torquedot);
    stream.next(m.theta);
    stream.next(m.thetadot);
    stream.next(m.thetadotdot);
    stream.next(m.completed_spline_idx);
    stream.next(m.pwm_cmd);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3JointArrayStatusResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<m3meka_msgs::M3JointArrayStatus> {
  static const char* value() 
  {
    return "fd0ff7bf51cf3c5324e0ee2aef6015d7";
  }

  static const char* value(const m3meka_msgs::M3JointArrayStatus&) { return value(); } 
};

template<>
struct DataType<m3meka_msgs::M3JointArrayStatus> {
  static const char* value() 
  {
    return "m3meka_msgs/M3JointArrayStatus";
  }

  static const char* value(const m3meka_msgs::M3JointArrayStatus&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd0ff7bf51cf3c5324e0ee2aef6015d7";
  }

  static const char* value(const m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3JointArrayStatus";
  }

  static const char* value(const m3meka_msgs::M3JointArrayStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd0ff7bf51cf3c5324e0ee2aef6015d7";
  }

  static const char* value(const m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3JointArrayStatus";
  }

  static const char* value(const m3meka_msgs::M3JointArrayStatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // M3MEKA_MSGS_SERVICE_M3JOINTARRAYSTATUS_H

