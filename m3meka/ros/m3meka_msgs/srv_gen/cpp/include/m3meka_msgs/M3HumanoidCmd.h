/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/m3meka/ros/m3meka_msgs/srv/M3HumanoidCmd.srv */
#ifndef M3MEKA_MSGS_SERVICE_M3HUMANOIDCMD_H
#define M3MEKA_MSGS_SERVICE_M3HUMANOIDCMD_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace m3meka_msgs
{
template <class ContainerAllocator>
struct M3HumanoidCmdRequest_ : public ros::Message
{
  typedef M3HumanoidCmdRequest_<ContainerAllocator> Type;

  M3HumanoidCmdRequest_()
  : chain(0)
  , tq_desired()
  , ctrl_mode()
  , q_stiffness()
  , q_desired()
  , qdot_desired()
  , q_slew_rate()
  , pwm_desired()
  , enable_motor(false)
  {
  }

  M3HumanoidCmdRequest_(const ContainerAllocator& _alloc)
  : chain(0)
  , tq_desired(_alloc)
  , ctrl_mode(_alloc)
  , q_stiffness(_alloc)
  , q_desired(_alloc)
  , qdot_desired(_alloc)
  , q_slew_rate(_alloc)
  , pwm_desired(_alloc)
  , enable_motor(false)
  {
  }

  typedef uint8_t _chain_type;
  uint8_t chain;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tq_desired_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  tq_desired;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _ctrl_mode_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  ctrl_mode;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _q_stiffness_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  q_stiffness;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _q_desired_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  q_desired;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _qdot_desired_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  qdot_desired;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _q_slew_rate_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  q_slew_rate;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pwm_desired_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  pwm_desired;

  typedef uint8_t _enable_motor_type;
  uint8_t enable_motor;


  ROSCPP_DEPRECATED uint32_t get_tq_desired_size() const { return (uint32_t)tq_desired.size(); }
  ROSCPP_DEPRECATED void set_tq_desired_size(uint32_t size) { tq_desired.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_tq_desired_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->tq_desired; }
  ROSCPP_DEPRECATED void set_tq_desired_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->tq_desired = vec; }
  ROSCPP_DEPRECATED uint32_t get_ctrl_mode_size() const { return (uint32_t)ctrl_mode.size(); }
  ROSCPP_DEPRECATED void set_ctrl_mode_size(uint32_t size) { ctrl_mode.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_ctrl_mode_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->ctrl_mode; }
  ROSCPP_DEPRECATED void set_ctrl_mode_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->ctrl_mode = vec; }
  ROSCPP_DEPRECATED uint32_t get_q_stiffness_size() const { return (uint32_t)q_stiffness.size(); }
  ROSCPP_DEPRECATED void set_q_stiffness_size(uint32_t size) { q_stiffness.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_q_stiffness_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->q_stiffness; }
  ROSCPP_DEPRECATED void set_q_stiffness_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->q_stiffness = vec; }
  ROSCPP_DEPRECATED uint32_t get_q_desired_size() const { return (uint32_t)q_desired.size(); }
  ROSCPP_DEPRECATED void set_q_desired_size(uint32_t size) { q_desired.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_q_desired_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->q_desired; }
  ROSCPP_DEPRECATED void set_q_desired_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->q_desired = vec; }
  ROSCPP_DEPRECATED uint32_t get_qdot_desired_size() const { return (uint32_t)qdot_desired.size(); }
  ROSCPP_DEPRECATED void set_qdot_desired_size(uint32_t size) { qdot_desired.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_qdot_desired_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->qdot_desired; }
  ROSCPP_DEPRECATED void set_qdot_desired_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->qdot_desired = vec; }
  ROSCPP_DEPRECATED uint32_t get_q_slew_rate_size() const { return (uint32_t)q_slew_rate.size(); }
  ROSCPP_DEPRECATED void set_q_slew_rate_size(uint32_t size) { q_slew_rate.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_q_slew_rate_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->q_slew_rate; }
  ROSCPP_DEPRECATED void set_q_slew_rate_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->q_slew_rate = vec; }
  ROSCPP_DEPRECATED uint32_t get_pwm_desired_size() const { return (uint32_t)pwm_desired.size(); }
  ROSCPP_DEPRECATED void set_pwm_desired_size(uint32_t size) { pwm_desired.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_pwm_desired_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->pwm_desired; }
  ROSCPP_DEPRECATED void set_pwm_desired_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->pwm_desired = vec; }
private:
  static const char* __s_getDataType_() { return "m3meka_msgs/M3HumanoidCmdRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b43a3aea53346c3fbcd4954afa276df8"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "36825d9d1e10e133bf2112ce1e5afc9c"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 chain\n\
float32[] tq_desired\n\
uint8[] ctrl_mode\n\
float32[] q_stiffness\n\
float32[] q_desired\n\
float32[] qdot_desired\n\
float32[] q_slew_rate\n\
float32[] pwm_desired\n\
bool enable_motor\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, chain);
    ros::serialization::serialize(stream, tq_desired);
    ros::serialization::serialize(stream, ctrl_mode);
    ros::serialization::serialize(stream, q_stiffness);
    ros::serialization::serialize(stream, q_desired);
    ros::serialization::serialize(stream, qdot_desired);
    ros::serialization::serialize(stream, q_slew_rate);
    ros::serialization::serialize(stream, pwm_desired);
    ros::serialization::serialize(stream, enable_motor);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, chain);
    ros::serialization::deserialize(stream, tq_desired);
    ros::serialization::deserialize(stream, ctrl_mode);
    ros::serialization::deserialize(stream, q_stiffness);
    ros::serialization::deserialize(stream, q_desired);
    ros::serialization::deserialize(stream, qdot_desired);
    ros::serialization::deserialize(stream, q_slew_rate);
    ros::serialization::deserialize(stream, pwm_desired);
    ros::serialization::deserialize(stream, enable_motor);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(chain);
    size += ros::serialization::serializationLength(tq_desired);
    size += ros::serialization::serializationLength(ctrl_mode);
    size += ros::serialization::serializationLength(q_stiffness);
    size += ros::serialization::serializationLength(q_desired);
    size += ros::serialization::serializationLength(qdot_desired);
    size += ros::serialization::serializationLength(q_slew_rate);
    size += ros::serialization::serializationLength(pwm_desired);
    size += ros::serialization::serializationLength(enable_motor);
    return size;
  }

  typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct M3HumanoidCmdRequest
typedef  ::m3meka_msgs::M3HumanoidCmdRequest_<std::allocator<void> > M3HumanoidCmdRequest;

typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdRequest> M3HumanoidCmdRequestPtr;
typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdRequest const> M3HumanoidCmdRequestConstPtr;


template <class ContainerAllocator>
struct M3HumanoidCmdResponse_ : public ros::Message
{
  typedef M3HumanoidCmdResponse_<ContainerAllocator> Type;

  M3HumanoidCmdResponse_()
  : response(0)
  {
  }

  M3HumanoidCmdResponse_(const ContainerAllocator& _alloc)
  : response(0)
  {
  }

  typedef int32_t _response_type;
  int32_t response;


private:
  static const char* __s_getDataType_() { return "m3meka_msgs/M3HumanoidCmdResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f45f68e2feefb1307598e828e260b7d7"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "36825d9d1e10e133bf2112ce1e5afc9c"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 response\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, response);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, response);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(response);
    return size;
  }

  typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct M3HumanoidCmdResponse
typedef  ::m3meka_msgs::M3HumanoidCmdResponse_<std::allocator<void> > M3HumanoidCmdResponse;

typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdResponse> M3HumanoidCmdResponsePtr;
typedef boost::shared_ptr< ::m3meka_msgs::M3HumanoidCmdResponse const> M3HumanoidCmdResponseConstPtr;

struct M3HumanoidCmd
{

typedef M3HumanoidCmdRequest Request;
typedef M3HumanoidCmdResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct M3HumanoidCmd
} // namespace m3meka_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b43a3aea53346c3fbcd4954afa276df8";
  }

  static const char* value(const  ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb43a3aea53346c3fULL;
  static const uint64_t static_value2 = 0xbcd4954afa276df8ULL;
};

template<class ContainerAllocator>
struct DataType< ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3HumanoidCmdRequest";
  }

  static const char* value(const  ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 chain\n\
float32[] tq_desired\n\
uint8[] ctrl_mode\n\
float32[] q_stiffness\n\
float32[] q_desired\n\
float32[] qdot_desired\n\
float32[] q_slew_rate\n\
float32[] pwm_desired\n\
bool enable_motor\n\
\n\
";
  }

  static const char* value(const  ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f45f68e2feefb1307598e828e260b7d7";
  }

  static const char* value(const  ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf45f68e2feefb130ULL;
  static const uint64_t static_value2 = 0x7598e828e260b7d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3HumanoidCmdResponse";
  }

  static const char* value(const  ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 response\n\
\n\
";
  }

  static const char* value(const  ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.chain);
    stream.next(m.tq_desired);
    stream.next(m.ctrl_mode);
    stream.next(m.q_stiffness);
    stream.next(m.q_desired);
    stream.next(m.qdot_desired);
    stream.next(m.q_slew_rate);
    stream.next(m.pwm_desired);
    stream.next(m.enable_motor);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3HumanoidCmdRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.response);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3HumanoidCmdResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<m3meka_msgs::M3HumanoidCmd> {
  static const char* value() 
  {
    return "36825d9d1e10e133bf2112ce1e5afc9c";
  }

  static const char* value(const m3meka_msgs::M3HumanoidCmd&) { return value(); } 
};

template<>
struct DataType<m3meka_msgs::M3HumanoidCmd> {
  static const char* value() 
  {
    return "m3meka_msgs/M3HumanoidCmd";
  }

  static const char* value(const m3meka_msgs::M3HumanoidCmd&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "36825d9d1e10e133bf2112ce1e5afc9c";
  }

  static const char* value(const m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3HumanoidCmd";
  }

  static const char* value(const m3meka_msgs::M3HumanoidCmdRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "36825d9d1e10e133bf2112ce1e5afc9c";
  }

  static const char* value(const m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3HumanoidCmd";
  }

  static const char* value(const m3meka_msgs::M3HumanoidCmdResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // M3MEKA_MSGS_SERVICE_M3HUMANOIDCMD_H

