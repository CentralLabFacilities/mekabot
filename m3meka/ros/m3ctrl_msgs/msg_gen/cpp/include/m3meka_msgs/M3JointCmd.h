/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/ROS_API/m3meka/ros/m3meka_msgs/msg/M3JointCmd.msg */
#ifndef M3MEKA_MSGS_MESSAGE_M3JOINTCMD_H
#define M3MEKA_MSGS_MESSAGE_M3JOINTCMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace m3meka_msgs
{
template <class ContainerAllocator>
struct M3JointCmd_ {
  typedef M3JointCmd_<ContainerAllocator> Type;

  M3JointCmd_()
  : stiffness(0.0)
  , velocity(0.0)
  , position(0.0)
  , control_mode(0)
  , smoothing_mode(0)
  {
  }

  M3JointCmd_(const ContainerAllocator& _alloc)
  : stiffness(0.0)
  , velocity(0.0)
  , position(0.0)
  , control_mode(0)
  , smoothing_mode(0)
  {
  }

  typedef float _stiffness_type;
  float stiffness;

  typedef float _velocity_type;
  float velocity;

  typedef float _position_type;
  float position;

  typedef int32_t _control_mode_type;
  int32_t control_mode;

  typedef int32_t _smoothing_mode_type;
  int32_t smoothing_mode;


  typedef boost::shared_ptr< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3meka_msgs::M3JointCmd_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct M3JointCmd
typedef  ::m3meka_msgs::M3JointCmd_<std::allocator<void> > M3JointCmd;

typedef boost::shared_ptr< ::m3meka_msgs::M3JointCmd> M3JointCmdPtr;
typedef boost::shared_ptr< ::m3meka_msgs::M3JointCmd const> M3JointCmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::m3meka_msgs::M3JointCmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace m3meka_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::m3meka_msgs::M3JointCmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aed3751ba5187f7889bee2c5e26703b2";
  }

  static const char* value(const  ::m3meka_msgs::M3JointCmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaed3751ba5187f78ULL;
  static const uint64_t static_value2 = 0x89bee2c5e26703b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3meka_msgs/M3JointCmd";
  }

  static const char* value(const  ::m3meka_msgs::M3JointCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 stiffness\n\
float32 velocity\n\
float32 position\n\
int32 control_mode\n\
int32 smoothing_mode\n\
\n\
\n\
";
  }

  static const char* value(const  ::m3meka_msgs::M3JointCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stiffness);
    stream.next(m.velocity);
    stream.next(m.position);
    stream.next(m.control_mode);
    stream.next(m.smoothing_mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3JointCmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::m3meka_msgs::M3JointCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::m3meka_msgs::M3JointCmd_<ContainerAllocator> & v) 
  {
    s << indent << "stiffness: ";
    Printer<float>::stream(s, indent + "  ", v.stiffness);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "control_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "smoothing_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.smoothing_mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // M3MEKA_MSGS_MESSAGE_M3JOINTCMD_H

