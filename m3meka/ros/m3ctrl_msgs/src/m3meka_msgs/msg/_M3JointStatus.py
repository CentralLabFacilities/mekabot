"""autogenerated by genpy from m3meka_msgs/M3JointStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import m3_msgs.msg

class M3JointStatus(genpy.Message):
  _md5sum = "9c6d93ab28413f8b473c8def3d02284b"
  _type = "m3meka_msgs/M3JointStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """m3_msgs/M3BaseStatus base
float32 motor_temp
float32 amp_temp
float32 current
float32 torque
float32 torquedot
float32 theta
float32 thetadot
float32 thetadotdot
float32 torque_gravity
int32 pwm_cmd
float32 ambient_temp
float32 case_temp
float32 power
int32 flags

================================================================================
MSG: m3_msgs/M3BaseStatus
string name
uint8 state
int64 timestamp
string rate
string version


"""
  __slots__ = ['base','motor_temp','amp_temp','current','torque','torquedot','theta','thetadot','thetadotdot','torque_gravity','pwm_cmd','ambient_temp','case_temp','power','flags']
  _slot_types = ['m3_msgs/M3BaseStatus','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base,motor_temp,amp_temp,current,torque,torquedot,theta,thetadot,thetadotdot,torque_gravity,pwm_cmd,ambient_temp,case_temp,power,flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(M3JointStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.base is None:
        self.base = m3_msgs.msg.M3BaseStatus()
      if self.motor_temp is None:
        self.motor_temp = 0.
      if self.amp_temp is None:
        self.amp_temp = 0.
      if self.current is None:
        self.current = 0.
      if self.torque is None:
        self.torque = 0.
      if self.torquedot is None:
        self.torquedot = 0.
      if self.theta is None:
        self.theta = 0.
      if self.thetadot is None:
        self.thetadot = 0.
      if self.thetadotdot is None:
        self.thetadotdot = 0.
      if self.torque_gravity is None:
        self.torque_gravity = 0.
      if self.pwm_cmd is None:
        self.pwm_cmd = 0
      if self.ambient_temp is None:
        self.ambient_temp = 0.
      if self.case_temp is None:
        self.case_temp = 0.
      if self.power is None:
        self.power = 0.
      if self.flags is None:
        self.flags = 0
    else:
      self.base = m3_msgs.msg.M3BaseStatus()
      self.motor_temp = 0.
      self.amp_temp = 0.
      self.current = 0.
      self.torque = 0.
      self.torquedot = 0.
      self.theta = 0.
      self.thetadot = 0.
      self.thetadotdot = 0.
      self.torque_gravity = 0.
      self.pwm_cmd = 0
      self.ambient_temp = 0.
      self.case_temp = 0.
      self.power = 0.
      self.flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.base.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Bq.pack(_x.base.state, _x.base.timestamp))
      _x = self.base.rate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9fi3fi.pack(_x.motor_temp, _x.amp_temp, _x.current, _x.torque, _x.torquedot, _x.theta, _x.thetadot, _x.thetadotdot, _x.torque_gravity, _x.pwm_cmd, _x.ambient_temp, _x.case_temp, _x.power, _x.flags))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.base is None:
        self.base = m3_msgs.msg.M3BaseStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.name = str[start:end].decode('utf-8')
      else:
        self.base.name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.base.state, _x.base.timestamp,) = _struct_Bq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.rate = str[start:end].decode('utf-8')
      else:
        self.base.rate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.version = str[start:end].decode('utf-8')
      else:
        self.base.version = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.motor_temp, _x.amp_temp, _x.current, _x.torque, _x.torquedot, _x.theta, _x.thetadot, _x.thetadotdot, _x.torque_gravity, _x.pwm_cmd, _x.ambient_temp, _x.case_temp, _x.power, _x.flags,) = _struct_9fi3fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.base.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Bq.pack(_x.base.state, _x.base.timestamp))
      _x = self.base.rate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9fi3fi.pack(_x.motor_temp, _x.amp_temp, _x.current, _x.torque, _x.torquedot, _x.theta, _x.thetadot, _x.thetadotdot, _x.torque_gravity, _x.pwm_cmd, _x.ambient_temp, _x.case_temp, _x.power, _x.flags))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.base is None:
        self.base = m3_msgs.msg.M3BaseStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.name = str[start:end].decode('utf-8')
      else:
        self.base.name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.base.state, _x.base.timestamp,) = _struct_Bq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.rate = str[start:end].decode('utf-8')
      else:
        self.base.rate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.version = str[start:end].decode('utf-8')
      else:
        self.base.version = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.motor_temp, _x.amp_temp, _x.current, _x.torque, _x.torquedot, _x.theta, _x.thetadot, _x.thetadotdot, _x.torque_gravity, _x.pwm_cmd, _x.ambient_temp, _x.case_temp, _x.power, _x.flags,) = _struct_9fi3fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9fi3fi = struct.Struct("<9fi3fi")
_struct_Bq = struct.Struct("<Bq")
